name: Continuous Integration Checks

on: [push, pull_request]

jobs:
  check_bindings:
    runs-on: ubuntu-latest
    # Ubuntu's version of rustc uses its own LLVM instead of being a real native package.
    # This leaves us with an incompatible LLVM version when linking. Instead, use a real OS.
    container: debian:bullseye
    env:
      TOOLCHAIN: stable
    steps:
      - name: Install native Rust toolchain, Valgrind, and build utilitis
        run: |
          apt-get update
          apt-get -y dist-upgrade
          apt-get -y install cargo libstd-rust-dev-wasm32 valgrind lld git g++ clang openjdk-11-jdk maven
      - name: Checkout source code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Install cbindgen
        run: cargo install --force cbindgen
      - name: Checkout Rust-Lightning and LDK-C-Bindings git
        run: |
          git config --global user.email "ldk-ci@example.com"
          git config --global user.name "LDK CI"
          git clone https://github.com/rust-bitcoin/rust-lightning
          cd rust-lightning
          git remote add matt https://git.bitcoin.ninja/rust-lightning
          git fetch matt
          git merge matt/2021-03-java-bindings-base
          cd ..
          git clone https://github.com/lightningdevkit/ldk-c-bindings
          cd ldk-c-bindings
          git remote add matt https://git.bitcoin.ninja/ldk-c-bindings
          git fetch matt
          git merge matt/main
          cd ..
      - name: Rebuild C bindings without STD for WASM
        run: |
          cd ldk-c-bindings
          ./genbindings.sh ../rust-lightning false
          mv lightning-c-bindings/target/wasm32-wasi ./
          cd ..
      - name: Rebuild C bindings, and check the sample app builds + links
        run: cd ldk-c-bindings && ./genbindings.sh ../rust-lightning true && mv wasm32-wasi lightning-c-bindings/target/ && cd ..
      - name: Build Java/TS Debug Bindings
        run: ./genbindings.sh ./ldk-c-bindings/ "-I/usr/lib/jvm/java-11-openjdk-amd64/include/ -I/usr/lib/jvm/java-11-openjdk-amd64/include/linux/" true false
      - name: Run Java Tests against Debug Bindings
        run: |
          rm liblightningjni.so
          ln -s liblightningjni_debug.so liblightningjni.so
          export LD_LIBRARY_PATH=.
          export LD_PRELOAD=/usr/lib/llvm-11/lib/clang/11.0.1/lib/linux/libclang_rt.asan-x86_64.so
          export ASAN_OPTIONS=detect_leaks=0
          mvn test
          git checkout liblightningjni.so
      - name: Build Java/TS Release Bindings
        run: |
          # We assume the top commit is just a bindings update commit, so we
          # check out the previous commit to use as the commit we git describe.
          # If the top commit is a merge commit, we need to get the last merge
          # head and assume the latest bindings are built against its parent.
          COMMIT_PARENTS=$(git show -s --pretty=format:%P HEAD)
          if [ "${#COMMIT_PARENTS}" = 40 ]; then
            export LDK_GARBAGECOLLECTED_GIT_OVERRIDE="$(git describe --tag HEAD^1)"
          else
            MERGE_HEAD=$(git show --pretty=format:%P HEAD | ( for last in $(cat /dev/stdin); do true; done; echo $last ))
            export LDK_GARBAGECOLLECTED_GIT_OVERRIDE="$(git describe --tag $MERGE_HEAD^1)"
          fi
          echo "Using $LDK_GARBAGECOLLECTED_GIT_OVERRIDE as git version"
          ./genbindings.sh ./ldk-c-bindings/ "-I/usr/lib/jvm/java-11-openjdk-amd64/include/ -I/usr/lib/jvm/java-11-openjdk-amd64/include/linux/" false false
      - name: Check latest headers are in git
        run: |
          # For some reason the debug library is not deterministic, this may be fixed in a future rustc
          git checkout liblightningjni_debug.so
          git diff --exit-code
